list(
name="小明",
是否完成=T,
`完成所花時間(秒)`=350,
tools=c(
"anchor","axe")
)
yy <- 2020
mm <- "Mar"
dd <- 15
event_list <- list(
time=ymd(paste0(yy,mm,dd)),
list(
name="小明",
是否完成=T,
`完成所花時間(秒)`=350,
tools=c(
"anchor","axe")
)
yy <- 2020
mm <- "Mar"
dd <- 15
event_list <- list(
time=ymd(paste0(yy,mm,dd)),
list(
name="小明",
是否完成=T,
`完成所花時間(秒)`=350,
tools=c(
"anchor","axe")
)
yy <- 2020
mm <- "Mar"
dd <- 15
event_list <- list(
time=ymd(paste0(yy,mm,dd)),
list(
name="小明",
是否完成=T,
`完成所花時間(秒)`=350,
tools=c(
"anchor","axe")
)
yy <- 2020
mm <- "Mar"
dd <- 15
event_list <- list(
time=ymd(paste0(yy,mm,dd)),
list(
name="小明",
`是否完`=T,
`完成所花時間(秒)`=350,
tools=c(
"anchor","axe")
)
yy <- 2020
mm <- "Mar"
dd <- 15
event_list <- list(
time=ymd(paste0(yy,mm,dd)),
list(
name="小明",
`是否完`=T,
`完成所花時間(秒)`=350,
tools=c(
"anchor","axe")
))
install.packages(c(library(lubridate)))
ymd_hms(two_times)
two_times
str(two_times)
ymd_hms(two_times)
two_times
typeof(two_times)
ymd_hms(two_times)
two_times
class(two_times)
ymd_hms(two_times,tz="Asia/Taipei")
two_times
ymd_hms(two_times,tz="Asia/Taipei")
two_times
str(two_times)
ymd_hms(two_times,tz="UTC")
two_times
str(two_times)
ymd_hms(two_times,tz="UTC")
two_times
str(two_times)
ymd_hms(two_times,tz="UTC")
two_times
class(two_times)
ymd_hms(two_times,tz="UTC")
two_times
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
legnth(tainanSportsMap)
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
legnth(tainanSportsMap)
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
length(tainanSportsMap)
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
length(tainanSportsMap)
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
View(tainanSportsMap)
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
length(tainanSportsMap)
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
names(tainanSportsMap)
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
length(tainanSportsMap)
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
tainanSportsMap$`游泳`
tainanSportsMap$`游泳池`
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
length(tainanSportsMap)
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
tainanSportsMap$`游泳池`
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
length(tainanSportsMap)
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
tainanSportsMap$`台南市立游泳池`
tainanSportsMap$`台南市立游泳池`
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
length(tainanSportsMap)
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
tainanSportsMap$`台南市立游泳池`
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選：
length(listExample)
listExample$學期
listExample$`學期`
View(tainanSportsMap)
View(listExample)
View(listExample)
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002",
simplifyDataFrame = F) -> newTaipeiCityVaccine
View(newTaipeiCityVaccine)
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002",
simplifyDataFrame = F) -> newTaipeiCityVaccine
newTaipeiCityVaccine$result
names(newTaipeiCityVaccine)
vectorExample
vectorExample
vectorExample
vectorExample
vectorExample
vectorExample
vectorExample=c(a,b,c)
vectorExample=c("a","b","c")
vectorExample[c(1,3)]
vectorExample[c(3,2,1)] # 產生重新排列效果
str(listExample, max.level=1)
str(listExample, max.level=2)
```{r}
tainanSportsMap[c(1,5,605,888)]
name(tainanSportsMap)
names(tainanSportsMap)
names(tainanSportsMap)
names(listExample)
listExample[c("學期","student")]
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
View(taipeiNightMarkets)
str(taipeiNightMarkets)
names(taipeiNightMarkets)
taipeiNightMarkets[(c(T,F,F,F,T,F,F,F,F,T,F,F,F,T))]
selectedmarckets= c(T,F,F,F,T,F,F,F,F,T,F,F,F,T)
selectedmarkets= c(T,F,F,F,T,F,F,F,F,T,F,F,F,T)
taipeiNightMarkets[[selectedmarkets]]
taipeiNightMarkets[selectedmarkets]
taipeiNightMarkets[selectedmarkets,max.level=1]
taipeiNightMarkets[selectedmarkets, max.level=1]
str(taipeiNightMarkets[selectedmarkets, max.level=1])
str(taipeiNightMarkets[selectedmarkets], max.level=1)
str(taipeiNightMarkets)
str(listExample)
rep(T,14)
rep(T,14)= testselected
rep(T,14) <- testselected
rep(T,14) <- testselected
rep(T,14) -> testselected
#reapeat
str(taipeiNightMarkets[testselected],max.level=2)
#reapeat
str(taipeiNightMarkets[testselected],max.level=1)
#reapeat
testselected[c(1,5,10,14)] <- T
str(taipeiNightMarkets[testselected],max.level=1)
selectedmarkets= c(T,F,F,F,T,F,F,F,F,T,F,F,F,T)
selectedmarkets= c(T,F,F,F,T,F,F,F,F,T,F,F,F,T)
str(taipeiNightMarkets[testselected],max.level=1)
rep(F,14) -> testselected
#reapeat
testselected[c(1,5,10,14)] <- T
str(taipeiNightMarkets[testselected],max.level=1)
str(taipeiNightMarkets[selectedmarkets], max.level=1)
knitr::opts_chunk$set(echo = F, eval=F)
library(lubridate); library(jsonlite); library(readr)
View(params)
View(params)
library(jsonlite)
rawaccidents=fromJSON("https://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000328-002")
str(accidents)
accidents= rawaccidents[c("type","casualties"]
accidents=rawaccidents[c("type","casualties"]
rawaccidents[c("type","casualties"]
str(accidents)
rawaccidents[c("type","casualties"]
rawaccidents[c("type","casualties"]
names(rawaccidents)
rawaccidents[c("sucess","result"]
names(rawaccidents)
rawaccidents[c("sucess","result"]
names(rawaccidents)
rawaccidents[c("success","result"]
rawaccidents[c("success","result"]
rawaccidents[c("success","result"]
library(jsonlite)
rawaccidents=fromJSON("https://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000328-002")
names(rawaccidents)
rawaccidents[c("success","result"]
rawaccidents[c(success,result]
rawaccidents[1]
names(rawaccidents)
rawaccident$c(suucess,result)
names(rawaccidents)
rawaccidents$c(suucess,result)
names(rawaccidents)
rawaccidents[c("suuccess","result")]
rawaccidents(selected)
rawaccidents[selected]
rawaccidents[c("suuccess","result")]
rep(F,10)=selected
selected[c(1,2)] <- T
rawaccidents[selected]
rep(F,10)=selected
rep(F,10)=`selected`
selected= rep(F,10)
selected[c(1,2)] <- T
rawaccidents[selected]
rawaccidents[selected]
rawaccidents[selected]
rawaccidents[selected]
rawaccidents[selected]
str(rawaccidents)
selected[c(1,2)] <-T
rawaccidents[selected]
names(rawaccidents)
rawaccidents[c("suuccess","result")]
rawaccidents$"organ"
rawaccidents$"organ"
str(rawaccidents)
rawaccidents$organ
rawaccidents$`organ`
str(rawaccidents)
str(rawaccidents$records)
str(rawaccidents$"records")
str(rawaccidents$"records")
str(rawaccidents$"records")
str(rawaccidents$"records")
str(rawaccidents)
View(rawaccidents)
str(rawaccidents[result[records[organ]]])
str(rawaccidents["result"]
str(rawaccidents["result"]
str(rawaccidents["result"])
rawaccidents$result$records$organ$c(1,2)
knitr::opts_chunk$set(echo = F, eval=F)
library(lubridate); library(jsonlite); library(readr)
levels(fiveReceipts)= levels_fiveReceipts
levels(fiveReceipts)= levels_fiveReceipts
levels(fiveReceipts)= `levels_fiveReceipts`
levels_fiveReceipts
levels(fiveReceipts) <-levels_fiveReceipts
levels(fiveReceipts) <- `levels_fiveReceipts`
levels_fiveReceipts
levels_fiveReceipts
levels_fiveReceipts
### 4.3
使用as.character()函數將fiveReceipts在螢幕顯示的表面值改成字串，並把回傳的結果值存在chr_fiveReceipts.
```{r ans43}
# chr_fiveReceipts
```
### 4.4
若我們想要把fiveReceipts的螢幕顯示值用sum()函數加總，在只使用as.{class name}函數下，要怎麼做？把sum完的結果存在sum_fiveReceipts。
```{r ans44}
# sum_fiveReceipts
```
library(jsonlite)
rawaccidents=fromJSON("https://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000328-002")
names(rawaccidents)
rawaccidents[c("suuccess","result")]
str(rawaccidents)
rawaccidents$result$records$organ$c(1,2)
yy <- 2020
mm <- "Mar"
dd <- 15
event_list <- list(
time=ymd(paste0(yy,mm,dd)),
list(
name="小明",
`是否完`=T,
`完成所花時間(秒)`=350,
tools=c(
"anchor","axe")
))
levels(fiveReceipts) <- `levels_fiveReceipts`
str(two_times)
ymd_hms(two_times,tz="UTC")
str(two_times)
taiwan_time <- "西元2019年4月12日 12點55分30秒"
oslo_time <- "18.11.2018 15:33:02"
two_times=list(taiwan_time,oslo_time)
print(taiwan_time,sep="\n")
ymd_hms(two_times,tz="UTC")
two_times
str(two_times)
typeof(two_times)
two_times_chicago= ymd_hms(two_times,tz="America/Chicago")
two_times_chicago
two_times_chicago= ymd_hms(two_times,tz="America/Chicago")
two_times_chicago
two_times_chicago
two_times_chicago= ymd_hms(two_times,tz="America/Chicago")
two_times_chicago
two_times_chicago= ymd_hms(two_times,tz="America/Chicago")
two_times_chicago
two_times_chicago= ymd_hms(two_times,tz="America/Chicago")
two_times_chicago
two_times_chicago= ymd_hms(two_times,tz="America/Chicago")
two_times_chicago
two_times_chicago= ymd_hms(two_times,tz="America/Chicago")
two_times_chicago
two_times_chicago= ymd_hms(two_times,tz="America/Chicago")
two_times_chicago
two_times_chicago= ymd_hms(two_times,tz="America/Chicago")
two_times_chicago
two_times_chicago= ymd_hms(two_times,tz="America/Chicago")
two_times_chicago
two_times_chicago= ymd_hms(two_times,tz="America/Chicago")
two_times_chicago
two_times_chicago= ymd_hms(two_times,tz="America/Chicago")
two_times_chicago
two_times_chicago= ymd_hms(two_times,tz="America/Chicago")
two_times_chicago
## 3 List
### 3.1
小明修課清單中有**會計學**，**3**學分，**必**修，上課時地為每個**星期三**的**7 8 9**節在**商2F05**教室，目前清單上出現**已核準**。請完成物件course，讓str(course)會顯示:
```
List of 2
$ approve: logi TRUE
$ course :List of 4
..$ coursename: chr "會計學"
..$ type      : chr "必"
..$ credits   : num 3
..$ time_place:List of 1
.. ..$ :List of 3
.. .. ..$ weekday   : chr "星期三"
.. .. ..$ time_slots: num [1:3] 7 8 9
.. .. ..$ classroom : chr "商2F05"
```
其中approve（核準狀況，logics class），course_info(課程資訊), coursename(課名), type（類別，必/選/通）, credits（學分數, numeric class）, time_place（上課時地）, weekday（星期）, time_slots（節次, numeric class）, classroom（教室）的意思如（）內容所示。
```{r ans31}
course=
list(
list(approve= T,
course=list(
coursename="會計學",
type= "必",
Credits=3,
time_place=list(list(weekday="星期三",
time_slots=7,8,9,
classroom="商2F05"))
))
)
str(course)
course
courseUpdate=
list(
list(approve= T,
course=list(
coursename="會計學",
type= "必",
Credits=3,
time_place=list(list(weekday="星期三",
time_slots=7,8,9,
classroom="商2F05"),
list(weekday="星期二",
time_slots=5,
classroom="商2F05"))
))
)
courseUpdate
library(jsonlite)
rawaccidents=fromJSON("https://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000328-002")
names(rawaccidents)
rawaccidents[c("suuccess","result")]
str(rawaccidents)
rawaccidents$result$records$organ$c(1,2)
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1
select2 <- select1[[1]]; select2
# 相當於
numVector[c(1,4)][[1]]
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1
select2 <- select1[[1]]; select2
select1 <- numVector[c(1,4)]; select1
select1 <- numVector[c(1,4)]; select1
select2 <- select1[[1]]; select2
# 相當於
numVector[c(1,4)][[1]]
# 相當於
numVector[c(1,4)][[1]]
# 相當於
numVector[c(1,4)][[1]]
# 相當於
numVector[c(1,4)][[1]]
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1
select2 <- select1[[1]]; select2
# 相當於
numVector[c(1,4)][[1]]
library(jsonlite)
rawaccidents=fromJSON("https://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000328-002")
names(rawaccidents)
rawaccidents[c("suuccess","result")]
str(rawaccidents)
rawaccidents$result <- layer1
rawaccidents$result <- layer1
rawaccidents$result <- `layer1`
rawaccidents$result <- `layer1`
rawaccidents$result -> `layer1`
layer1$records -> `layer2`
layer2$organ[c(1,2)] -> `stationname`
stationame
stationname
View(rawaccidents)
str(rawaccidents)
source("https://www.dropbox.com/s/bvs0m4oxw7yaqxw/108-2-hw1-3.R?dl=1")
source("https://www.dropbox.com/s/bvs0m4oxw7yaqxw/108-2-hw1-3.R?dl=1")
fiveReceipts <- .randomReceipts(n=5)
levels(fiveReceipts) <- `levels_fiveReceipts`
levels(fiveReceipts) -> `levels_fiveReceipts`
levels_fiveReceipts
as.integer((levels_fiveReceipts))-> storage_fiveReceipts
storage_fiveReceipts
as.character(storage_fiveReceipts)->chr_ficeRecepits
chr_fiveReceipts
as.character(storage_fiveReceipts)->chr_fiveRecepits
chr_fiveReceipts
as.character(storage_fiveReceipts)->chr_fiveReceipts
chr_fiveReceipts
library(jsonlite)
rawaccidents=fromJSON("https://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000328-002")
names(rawaccidents)
rawaccidents[c("suuccess","result")]
str(rawaccidents)
rawaccidents$result -> `layerresult`
layerresult$records -> `layerrecords`
layerrecords$organ[c(1,2)] -> `stationname`
stationname
str(layerresult$type)
str(layerresult$type)
layerfields$type
layerfields$type
layerresult$fields -> `layerfields`
layerfields$type
rawToChar(layerfields$type)
rawToChar(layerfields$type)
charToRaw(layerfields$type)
charToRaw(layerfields$type)
layerfields$type
layerfields$id
layerfields$id
layresult$records
layrerrsult$records
layerresult$records
